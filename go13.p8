pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
-- main

function _init()
 -- col change
 poke(0x5f10+1, 128+1)
	poke(0x5f10+2, 128+2)

 -- menuitem
 menuitem(1, "pass", function() pass_player() end)

 -- pointer
 pointer = {}
 pointer.x = 1
 pointer.y = 1
 pointer.sp = 8
 pointer.timer = -10
 pointer.current = 2 // 1=white 2=black
 
 -- board
 board = {{"", "", "", "", "", "", "", "", "", "", "", "", ""},
									 {"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""},
 									{"", "", "", "", "", "", "", "", "", "", "", "", ""}}
 
 -- white stones
 white = {}
 white.sp = 7
 white.points = 0
 
 -- black stones
 black = {}
 black.sp = 6
 black.points = 0
 
end

function _draw()
 -- draw map
 cls()
 map()
 if pointer.current == 1 then spr(white.sp, 60, 0)
 else spr(black.sp, 60, 0) end
 
 -- draw board
 for i, rows in pairs(board) do
  for j, point in pairs(rows) do
   if point == "b" then
   	spr(black.sp, (j-1)*8+12, (i-1)*8+12)
   elseif point == "w" then
   	spr(white.sp, (j-1)*8+12, (i-1)*8+12)
   end
  end
 end
 
 -- draw pointer
 spr(pointer.sp, (pointer.x-1) * 8 + 12, (pointer.y-1) * 8 + 12)
 
 -- draw score
 print("black: " .. white.points, 10, 0)
 print("white: " .. black.points, 90, 0)
 
end

function _update()
 -- pointer
 pointer.timer += 1
 if (pointer.timer > 10) then pointer.timer = -10 end
 if (pointer.timer < 0) then pointer.sp = 8 else pointer.sp = 9 end
 -- pointer control
 if btnp(‚¨ÖÔ∏è) and pointer.x > 1 then pointer.x -= 1
 elseif btnp(‚û°Ô∏è) and pointer.x < 13 then pointer.x += 1
 elseif btnp(‚¨ÜÔ∏è) and pointer.y > 1 then pointer.y -= 1
 elseif btnp(‚¨áÔ∏è) and pointer.y < 13 then pointer.y += 1
 elseif btnp(‚ùé) then
  
  if board[pointer.y][pointer.x] == "" then
   if pointer.current == 1 then
    board[pointer.y][pointer.x] = "w"
    pass_player() 
    sfx(0)
   else
    board[pointer.y][pointer.x] = "b"
    pass_player()
    sfx(1)
   end
  end
  
 elseif btnp(üÖæÔ∏è) then
  if board[pointer.y][pointer.x] == "b" then
   board[pointer.y][pointer.x] = ""
   white.points += 1
   sfx(2)
  elseif board[pointer.y][pointer.x] == "w" then
   board[pointer.y][pointer.x] = ""
   black.points += 1
   sfx(2)
  end
 end
 
end
-->8
-- stone removal

-- look at current placed stone
-- look for oposite colored stones around
-- for each stone of oposing color
 -- check liberties of the given stone
 -- if liberty is "" not dead
 -- if liberty is "oponent" possibly dead
 -- if liberty "own_col" continue checking
 
-- todo

-- function that checks if point is within board
-- function that looks at all neighbours of a given stone

function check_capture(x, y, cur)
 if cur == 1 then// white player played last
  own = "w"
  op = "b"
 else
  own = "b"
  op = "w"
 end
 
 points = {}
 initial_points = {} -- store already checked points
 add(initial_points, {x,y})
 
 -- find all opp neighbours of the placed stone
 add_neighbours(x, y, own, op, points, initial_points)
 
 
end


-- add neighbours in {x,y}:"" format
function add_neighbours(x, y, own, ap, points, initial_points)
 if x-1 > 0 and (not contains(initial_points, {x-1, y})) then
  coord = {x-1, y}
  points[coord] = board[y][x-1]
 end
 
 if x+1 < 14 and (not contains(initial_points, {x+1, y})) then
  coord = {x+1, y}
  points[coord] = board[y][x+1]
 end
 
 if y-1 > 0 and (not contains(initial_points, {x, y-1})) then
  coord = {x, y-1}
  points[coord] = board[y-1][x]
 end
 
 if y+1 > 14 and (not contains(initial_points, {x, y+1})) then
  coord = {x, y+1}
  points[coord] = board[y+1][x]
 end
end

-- check if point is in table
function contains(tab, point)
 for p in all(tab) do
  if p[1] == point[1] and p[2] == point[2] then
   return true
  end
 end
 return false
end

function pass_player()
 if pointer.current == 1 then
  pointer.current = 2
 else
  pointer.current = 1
 end
end
-->8
-- look at all stones of opponent
-- clear ones that are dead
__gfx__
0000000099999994499999949999994499999994999999940011100000ddd0007770077700000000000000000000000000000000000000000000000000000000
000000009999999499999994999999949999999499999994012221000d777d007880088707777770000000000000000000000000000000000000000000000000
00700700999999949999999499999994999999949999999412dd2210d76677d07800008707888870000000000000000000000000000000000000000000000000
00077000999999949999999499999994999999949999999412d22215d76777d50000000007800870000000000000000000000000000000000000000000000000
00077000999999949999999499999994999999949999999412222215d77777d50000000007800870000000000000000000000000000000000000000000000000
007007009999999499999994999999949999999499999994012221550d777d557800008707888870000000000000000000000000000000000000000000000000
0000000099999994999999949999999499999944499999940011155000ddd5507880088707777770000000000000000000000000000000000000000000000000
00000000444444444444444444444444444444444444444400055500000555007770077700000000000000000000000000000000000000000000000000000000
33333333099999949999999999999990000000003333333304405333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999949999999999999990999999990333333340405333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999949999999999999990999999994033333344005333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999949999999999999990999999994403333300005333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999949999999999999990999999994440333355555333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999949999999999999990999999994440533333333333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999949999999999999990999999994440533333333333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999940000000099999990444444444440533333333333000000000000000000000000000000000000000000000000000000000000000000000000
30444444099999990000000000000000999999904440533344444444000000000000000000000000000000000000000000000000000000000000000000000000
33044444099999990999999999999990999999904440533344444444000000000000000000000000000000000000000000000000000000000000000000000000
33304444099999990999999999999990999999904440533344444444000000000000000000000000000000000000000000000000000000000000000000000000
33330000099999990999999999999990999999904440533300000000000000000000000000000000000000000000000000000000000000000000000000000000
33333555099999990999999999999990999999904440533355555555000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999990999999999999990999999904440533333333333000000000000000000000000000000000000000000000000000000000000000000000000
33333333099999990999999999999990999999904440533333333333000000000000000000000000000000000000000000000000000000000000000000000000
33333333000000000999999499999990000000004440533333333333000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1022141414141414141414141414231500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010101010101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010101010101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010104050101010104050101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010103020101010103020101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010101010101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010104050101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010103020101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010101010101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010104050101010104050101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010103020101010103020101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010101010101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1011010101010101010101010101132500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1021121212121212121212121212242500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1020262626262626262626262626261600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0101000017220192201b2201d2201d220185001820018100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000017320193201b3201d3201d320185000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101000011420154201c4202542024420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
